name: ci

on:
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches:
      - main
  push:
    branches:
      - main
  workflow_call:


jobs:
  lint:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies if cache miss
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with=dev
      - name: Install dependencies if poetry.lock changed
        run: poetry install --no-interaction --with=dev
      - name: Compile proto to generate API stubs
        run: |
          source $VENV
          poetry run make generate
      - name: Run linter
        run: |
          source $VENV
          pre-commit run --color=always --show-diff-on-failure
      - name: Run tests with coverage
        run: |
          source $VENV
          poetry run coverage run
          poetry run coverage report -m
          poetry run coverage json
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3

  build:
    needs: lint
    strategy:
      matrix:
        os: [ "ubuntu-latest", "macos-latest", "windows-latest" ]
        python-version: [ "3.8", "3.9", "3.10", "3.11" ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies if cache miss
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with=dev
      - name: Install dependencies if poetry.lock changed
        run: poetry install --no-interaction --with=dev
      - name: Compile proto to generate API stubs
        run: |
          source $VENV
          poetry run make generate
      - name: Run tests
        run: |
          source $VENV
          poetry run python -m unittest discover -s tests -p "test_*.py"
