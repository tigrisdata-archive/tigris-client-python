# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ...server.v1 import observability_pb2 as server_dot_v1_dot_observability__pb2


class ObservabilityStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QueryTimeSeriesMetrics = channel.unary_unary(
                '/tigrisdata.observability.v1.Observability/QueryTimeSeriesMetrics',
                request_serializer=server_dot_v1_dot_observability__pb2.QueryTimeSeriesMetricsRequest.SerializeToString,
                response_deserializer=server_dot_v1_dot_observability__pb2.QueryTimeSeriesMetricsResponse.FromString,
                )
        self.QuotaLimits = channel.unary_unary(
                '/tigrisdata.observability.v1.Observability/QuotaLimits',
                request_serializer=server_dot_v1_dot_observability__pb2.QuotaLimitsRequest.SerializeToString,
                response_deserializer=server_dot_v1_dot_observability__pb2.QuotaLimitsResponse.FromString,
                )
        self.QuotaUsage = channel.unary_unary(
                '/tigrisdata.observability.v1.Observability/QuotaUsage',
                request_serializer=server_dot_v1_dot_observability__pb2.QuotaUsageRequest.SerializeToString,
                response_deserializer=server_dot_v1_dot_observability__pb2.QuotaUsageResponse.FromString,
                )
        self.GetInfo = channel.unary_unary(
                '/tigrisdata.observability.v1.Observability/GetInfo',
                request_serializer=server_dot_v1_dot_observability__pb2.GetInfoRequest.SerializeToString,
                response_deserializer=server_dot_v1_dot_observability__pb2.GetInfoResponse.FromString,
                )


class ObservabilityServicer(object):
    """Missing associated documentation comment in .proto file."""

    def QueryTimeSeriesMetrics(self, request, context):
        """Queries time series metrics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuotaLimits(self, request, context):
        """Returns current namespace quota limits
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuotaUsage(self, request, context):
        """Returns current namespace quota limits
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInfo(self, request, context):
        """Provides the information about the server. This information includes returning the server version, etc.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ObservabilityServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'QueryTimeSeriesMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryTimeSeriesMetrics,
                    request_deserializer=server_dot_v1_dot_observability__pb2.QueryTimeSeriesMetricsRequest.FromString,
                    response_serializer=server_dot_v1_dot_observability__pb2.QueryTimeSeriesMetricsResponse.SerializeToString,
            ),
            'QuotaLimits': grpc.unary_unary_rpc_method_handler(
                    servicer.QuotaLimits,
                    request_deserializer=server_dot_v1_dot_observability__pb2.QuotaLimitsRequest.FromString,
                    response_serializer=server_dot_v1_dot_observability__pb2.QuotaLimitsResponse.SerializeToString,
            ),
            'QuotaUsage': grpc.unary_unary_rpc_method_handler(
                    servicer.QuotaUsage,
                    request_deserializer=server_dot_v1_dot_observability__pb2.QuotaUsageRequest.FromString,
                    response_serializer=server_dot_v1_dot_observability__pb2.QuotaUsageResponse.SerializeToString,
            ),
            'GetInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInfo,
                    request_deserializer=server_dot_v1_dot_observability__pb2.GetInfoRequest.FromString,
                    response_serializer=server_dot_v1_dot_observability__pb2.GetInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tigrisdata.observability.v1.Observability', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Observability(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def QueryTimeSeriesMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tigrisdata.observability.v1.Observability/QueryTimeSeriesMetrics',
            server_dot_v1_dot_observability__pb2.QueryTimeSeriesMetricsRequest.SerializeToString,
            server_dot_v1_dot_observability__pb2.QueryTimeSeriesMetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QuotaLimits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tigrisdata.observability.v1.Observability/QuotaLimits',
            server_dot_v1_dot_observability__pb2.QuotaLimitsRequest.SerializeToString,
            server_dot_v1_dot_observability__pb2.QuotaLimitsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QuotaUsage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tigrisdata.observability.v1.Observability/QuotaUsage',
            server_dot_v1_dot_observability__pb2.QuotaUsageRequest.SerializeToString,
            server_dot_v1_dot_observability__pb2.QuotaUsageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tigrisdata.observability.v1.Observability/GetInfo',
            server_dot_v1_dot_observability__pb2.GetInfoRequest.SerializeToString,
            server_dot_v1_dot_observability__pb2.GetInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
